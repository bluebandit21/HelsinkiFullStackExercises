{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["axios","get","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","then","response","data","catch","error","setTimeout","notesToShow","filter","map","key","find","n","changedNote","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"yOAee,EAZA,WACb,OAAOA,IAAMC,IAHC,eAcD,EARA,SAAAC,GACb,OAAOF,IAAMG,KAPC,aAOaD,IAOd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAXO,aAWP,YAAwBD,GAAMF,ICExBI,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCG3BK,EAVM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EAAyB,KAGxB,yBAAKJ,UAAU,SACVI,IC8GEC,EAhHH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAMrBC,qBAAU,WACRC,QAAQC,IAAI,WACZC,IAEGC,MAAK,SAAAC,GACJJ,QAAQC,IAAI,qBACZT,EAASY,EAASC,SAEnBC,OAAM,SAAAC,GACLP,QAAQC,IAAI,iBAAiBM,GAC7BT,EAAgB,8FAGhBU,YAAW,WACTV,EAAgB,QAChB,UAGJ,IAEJ,IAAMW,EAAcd,EAChBJ,EACAA,EAAMmB,QAAO,SAAA/B,GAAI,OAAIA,EAAKG,aA6D9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASU,IACvB,6BACE,4BAAQZ,QAAS,kBAAMW,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAlDec,EAAYE,KAAI,SAAAhC,GAAI,OACrC,kBAAC,EAAD,CACEiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNC,iBAAkB,kBAtBK,SAAAJ,GACzB,IAAMG,EAAOY,EAAMsB,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAOA,KAChCuC,EAAW,eAAQpC,EAAR,CAAcG,WAAYH,EAAKG,YAChDoB,EACU1B,EAAIuC,GACXZ,MAAK,SAAAC,GACJZ,EAASD,EAAMoB,KAAI,SAAAhC,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAOyB,EAASC,YAE7DC,OAAM,SAAAC,GACLP,QAAQC,IAAI,oBAAoBM,GAChCT,EAAgB,oGAGhBU,YAAW,WACTV,EAAgB,QAChB,QAOoBkB,CAAmBrC,EAAKH,WAiDhD,0BAAMyC,SAzCM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBpC,QAASS,EACT4B,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,GAC3BjD,GAAIe,EAAMmC,OAAS,GAErBxB,EACUkB,GACPjB,MAAK,SAAAC,GACJZ,EAASD,EAAMoC,OAAOvB,EAASC,OAC/BX,EAAW,OAEZY,OAAM,SAAAC,GACLP,QAAQC,IAAI,oBAAoBM,GAChCT,EAAgB,kGAGhBU,YAAW,WACTV,EAAgB,QAChB,QAGNN,EAASD,EAAMoC,OAAOP,IACtB1B,EAAW,MAgBP,2BACEkC,MAAOnC,EACPoC,SAhDiB,SAACX,GACxBxB,EAAWwB,EAAMY,OAAOF,UAiDpB,4BAAQG,KAAK,UAAb,WCzGRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.83d9fb7e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null) return null\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\n\nimport Notification from './components/Notification'\nconst App = (props) => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('@effect')\n    noteService\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n      .catch(error => {\n        console.log('Error in get: ',error)\n        setErrorMessage(\n          `Error encoutered while retrieved notes from server.\\nPlease reload the page and try again.`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },3000)\n      })\n      \n    },[])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch(error => {\n        console.log('Error in update: ',error)\n        setErrorMessage(\n          `Error encoutered while retrieved updating note in server.\\nPlease reload the page and try again.`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },3000)\n      })\n  }\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n      .catch(error => {\n        console.log('Error in create: ',error)\n        setErrorMessage(\n          `Error encoutered while retrieved adding note to server.\\nPlease reload the page and try again.`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },3000)\n      })\n\n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App ","import './index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'  // highlight-line\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}