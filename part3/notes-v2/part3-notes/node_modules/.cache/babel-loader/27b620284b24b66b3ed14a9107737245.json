{"ast":null,"code":"import _slicedToArray from \"/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Note from './components/Note';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  const toggleImportanceOf = id => {\n    console.log('importance of ' + id + ' needs to be toggled');\n  };\n\n  useEffect(() => {\n    console.log('@effect');\n    axios.get('http://localhost:3001/notes').then(response => {\n      console.log('promise fulfilled');\n      setNotes(response.data);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    axios.post('http://localhost:3001/notes', noteObject).then(response => {\n      console.log(response);\n    });\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/src/App.js"],"names":["React","useState","useEffect","axios","Note","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","toggleImportanceOf","id","console","log","get","then","response","data","notesToShow","filter","note","important","rows","map","handleNoteChange","event","target","value","addNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","post","concat"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n\n  const toggleImportanceOf = id => {\n    console.log(\n      'importance of ' + id + ' needs to be toggled'\n    )\n  }\n\n  \n  useEffect(() => {\n    console.log('@effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n    },[])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n    />\n  )\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    axios\n      .post('http://localhost:3001/notes', noteObject)\n      .then(response => {\n        console.log(response)\n      })\n\n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App "]},"metadata":{},"sourceType":"module"}