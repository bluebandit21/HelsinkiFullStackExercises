{"ast":null,"code":"import _objectSpread from \"/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  useEffect(() => {\n    console.log('@effect');\n    noteService.getAll().then(response => {\n      console.log('promise fulfilled');\n      setNotes(response.data);\n    }).catch(error => {\n      console.log('Error in get: ', error);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    });\n\n    noteService.update(id, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n    }).catch(error => {\n      console.log('Error in update: ', error);\n    });\n  };\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(response => {\n      setNotes(notes.concat(response.data));\n      setNewNote('');\n    }).catch(error => {\n      console.log('Error in create: ', error);\n    });\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/plotner/git/HelsinkiFullStackExercises/part2/part2-notes/src/App.js"],"names":["React","useState","useEffect","noteService","Note","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","console","log","getAll","then","response","data","catch","error","notesToShow","filter","note","important","toggleImportanceOf","id","find","n","changedNote","update","map","rows","handleNoteChange","event","target","value","addNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","create","concat"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('@effect')\n    noteService\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n      .catch(error => {\n        console.log('Error in get: ',error)\n      })\n      \n    },[])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch(error => {\n        console.log('Error in update: ',error)\n      })\n  }\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n      .catch(error => {\n        console.log('Error in create: ',error)\n      })\n\n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App "]},"metadata":{},"sourceType":"module"}